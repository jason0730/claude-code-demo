apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: api-server
  labels:
    app: api-server
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: api-server
  template:
    metadata:
      labels:
        app: api-server
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: api-server
        image: api-server:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: SERVER_HOST
          valueFrom:
            configMapKeyRef:
              name: api-server-config
              key: SERVER_HOST
        - name: SERVER_PORT
          valueFrom:
            configMapKeyRef:
              name: api-server-config
              key: SERVER_PORT
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: api-server-secret
              key: jwt-secret
        - name: JWT_EXPIRATION
          valueFrom:
            configMapKeyRef:
              name: api-server-config
              key: JWT_EXPIRATION
        - name: REFRESH_EXPIRATION
          valueFrom:
            configMapKeyRef:
              name: api-server-config
              key: REFRESH_EXPIRATION
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: api-server-config
              key: LOG_LEVEL
        - name: LOG_FORMAT
          valueFrom:
            configMapKeyRef:
              name: api-server-config
              key: LOG_FORMAT
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      securityContext:
        fsGroup: 65534
